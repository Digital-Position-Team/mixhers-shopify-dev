{% schema %}
{
  "name": "Contact Us Section",
  "settings": [
    {
      "type": "text",
      "id": "heading_text",
      "label": "Heading Text",
      "default": "How can we help?"
    },
    {
      "type": "text",
      "id": "email_address",
      "label": "Contact Email",
      "default": "help@mixhers.com"
    },
    {
      "type": "textarea",
      "id": "service_hours",
      "label": "Customer Service Hours",
      "default": "Monday - Friday: 8:00 AM - 5:00 PM"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Submit Button Text",
      "default": "Send Message"
    },
   {
    "type": "image_picker",
    "id": "hero_image",
    "label": "Hero Image",
  }
  ],
  "presets": [
    {
      "name": "Contact Us",
      "category": "Contact"
    }
  ]
}
{% endschema %}
<style>
  .custom-contact--section{
    display:grid;
    grid-template-columns:1fr 1fr;
  }
  .contact-left{
    padding:30px 30px 40px 30px;
  }
  h1.contact-heading{
    margin:0px 0px 12px 0px;
  }
  .contact-breadcrumb {
    color: gray;
    text-decoration: none;
  }
  .contact-breadcrumb:hover {
    color: black;
  }
  #custom-contact-form input{
    line-height: 22px;
    height: auto;
    font-size: 16px;
    width: 100%;
    padding: 4px 10px;
    display: block;
    border: 1px solid #1a1a1a;
  }
   #custom-contact-form textarea{
    line-height: 22px;
    height: auto;
    font-size: 16px;
    width: 100%;
    padding: 4px 10px;
    display: block;
    border: 1px solid #1a1a1a;
   }
.marker\:text-pink *::marker {
  color: rgb(255 89 228 );
}

.marker\:text-pink::marker {
  color: rgb(255 89 228 );
}

.placeholder\:text-black::-moz-placeholder {
  --tw-text-opacity: 1;
  color: rgb(26 26 26 / var(--tw-text-opacity));
}

.placeholder\:text-black::placeholder {
  --tw-text-opacity: 1;
  color: rgb(26 26 26 / var(--tw-text-opacity));
}

.placeholder\:text-gray::-moz-placeholder {
  --tw-text-opacity: 1;
  color: rgb(124 137 147 / var(--tw-text-opacity));
}

.placeholder\:text-gray::placeholder {
  --tw-text-opacity: 1;
  color: rgb(124 137 147 / var(--tw-text-opacity));
}

  #custom-contact-form *:focus-visible{
    outline: 1px solid;
    outline-offset: 0;
    box-shadow: none;
  }
  .contact-left .form-container {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }
  .contact-left .form-container p{
    margin:0px;
    line-height: 1.5;
    font-weight:300;
  }
  .form-fields label {
    display: none;
  }
  .form-fields {
    display: flex;
    flex-direction: column;
    gap: 8px;
    padding-top:8px;
  }
  .submit-button{
    min-width:180px;
  }

  
</style>
<div class="h-full custom-contact--section" id="custom-contact-form">
<div class="contact-left ">
  <div class="contact-container">
    <div class="breadcrumb-div font-sans">
      <span><a href="/" class="contact-breadcrumb">Home</a>ãƒ»Contact Us</span>
    </div>
    <h1 class="contact-heading font-serif">{{ section.settings.heading_text }}</h1>
    {% assign formId = 'ContactForm' %}
    {% form 'contact', id: formId, class: 'contact-form', data-shopify-captcha: "true" %}
      <div class="form-container">
        <div id="success-message" class="form-success hidden" tabindex="-1" data-form-status>
          {{ 'templates.contact.form.post_success' | t }}
        </div>

        <div id="instruction-intro">
          <p class="instruction-text ">We want to hear from you.</p>
          <p class="instruction-text">Send an e-mail or use the form below to send us a message.</p>
        </div>

        {% if form.posted_successfully? %}
          <script>
            let instructionIntro = document.getElementById('instruction-intro');
            instructionIntro.classList.add('hidden');
            let successMessage = document.getElementById('success-message');
            successMessage.classList.remove('hidden');
            setTimeout(() => {
              successMessage.classList.add('hidden');
              instructionIntro.classList.remove('hidden');
            }, 6000);
          </script>
        {% endif %}

        <p class="instruction-text">
          Email: <a href="mailto:{{ section.settings.email_address }}">{{ section.settings.email_address }}</a>
        </p>

        <div>
          <p class="instruction-text">Customer service hours:</p>
          <p class="instruction-text">{{ section.settings.service_hours }}</p>
        </div>

        <div class="form-fields">
          <div>
            <label class="sr-only" for="ContactForm-name">{{ 'templates.contact.form.name' | t }}</label>
            <input class="form-input" placeholder="Name" type="text" id="ContactForm-name" name="contact[name]">
          </div>

          <div>
            <label class="sr-only" for="ContactForm-phone">{{ 'templates.contact.form.phone' | t }}</label>
            <input class="form-input" placeholder="Phone" type="tel" id="ContactForm-phone" name="contact[phone]">
          </div>

          <div>
            <label class="sr-only" for="ContactForm-email">{{ 'templates.contact.form.email' | t }} <span aria-hidden="true">*</span></label>
            <div style="position: relative;">
              <input id="email-input"
                class="form-input"
                placeholder="Email*" type="email" name="contact[email]" autocorrect="off"
                autocapitalize="off" aria-required="true" required="required"
                {% if form.errors contains 'email' %}
                  aria-invalid="true"
                  aria-describedby="ContactForm-email-error"
                {% endif %}>
              <span id="email-placeholder" class="hidden" style="position: absolute; top: 0; left: 0; padding-left: 12px; padding-top: 4px; color: black;">
                Email<span style="color: #ff4d6d;">*</span>
              </span>
            </div>
          </div>

          <div id="email-error" class="error-message hidden">please enter a valid email address.</div>

          <label class="sr-only" for="ContactForm-order">Order Number</label>
          <input class="form-input"
            placeholder="Order Number"
            type="text"
            id="ContactForm-order"
            name="contact[order_number]"
            {% if form.errors contains 'email' %}
              aria-invalid="true"
              aria-describedby="ContactForm-email-error"
            {% endif %}
          >

          <label class="sr-only" for="ContactForm-message">{{ 'templates.contact.form.message' | t }}</label>
          <div style="position: relative;">
            <textarea id="message-input"
              class="form-textarea"
              placeholder="Message*" rows="10" name="contact[message]" required="required" minlength="20"></textarea>
            <span id="message-placeholder" class="hidden" style="position: absolute; top: 0; left: 0; padding-left: 12px; padding-top: 4px; color: black;">
              Message<span style="color: #ff4d6d;">*</span>
            </span>
          </div>

          <div id="message-error" class="error-message hidden">please enter a message with at least 20 characters.</div>

          <div>
            <button type="submit" class="submit-button custom-primary-btn">
              {{ section.settings.button_text }}
            </button>
          </div>
        </div>
      </div>
    {% endform %}
  </div>
</div>
  <div class="contact-right">
    {% if section.settings.hero_image %}
      <img  src="{{ section.settings.hero_image | image_url }}" alt="Contact us Hero" loading="lazy"
      class="img-100" width="729" height="800">
    {% endif %}
  </div>
</div>

<script>
  const form = document.getElementById('ContactForm');
  const email = document.getElementById('email-input');
  const message = document.getElementById('message-input');
  const emailError = document.getElementById('email-error');
  const messageError = document.getElementById('message-error');
  const emailPlaceholder = document.getElementById('email-placeholder');
  const messagePlaceholder = document.getElementById('message-placeholder');
  const allInputs = document.querySelectorAll('input, textarea');

  document.addEventListener("DOMContentLoaded", () => {
    setTimeout(() => {
      allInputs.forEach((input) => {
        showCustomPlaceholder({ target: input });
      });
    }, 100);
  });

  form.addEventListener('submit', (event) => {
    if (!messageValidation() || !emailValidation()) {
      event.preventDefault();
      return;
    }
  });

  allInputs.forEach((input) => {
    input.addEventListener('focus', (event) => hideCustomPlaceholder(event));
    input.addEventListener('blur', (event) => showCustomPlaceholder(event));
  });

  let timeout = null;
  email.addEventListener('input', function (event) {
    clearTimeout(timeout);
    timeout = setTimeout(emailValidation, 1000);
  });
  message.addEventListener('input', function (event) {
    clearTimeout(timeout);
    timeout = setTimeout(messageValidation, 1000);
  });

  function hideCustomPlaceholder(event) {
    const input = event.target;
    if (input === email) {
      emailPlaceholder.classList.add('hidden');
      email.classList.remove('placeholder-transparent');
      email.classList.add('placeholder:text-gray');
    } else if (input === message) {
      messagePlaceholder.classList.add('hidden');
      message.classList.remove('placeholder-transparent');
      message.classList.add('placeholder:text-gray');
    } else {
      input.classList.remove('placeholder:text-black');
      input.classList.add('placeholder:text-gray');
    }
  }

  function showCustomPlaceholder(event) {
    const input = event.target;
    if (!input.value) {
      if (input === email) {
        emailPlaceholder.classList.remove('hidden');
        email.classList.add('placeholder-transparent');
        email.classList.remove('placeholder:text-gray');
      } else if (input === message) {
        messagePlaceholder.classList.remove('hidden');
        message.classList.add('placeholder-transparent');
        message.classList.remove('placeholder:text-gray');
      } else {
        input.classList.remove('placeholder:text-gray');
        input.classList.add('placeholder:text-black');
      }
    }
  }

  function emailValidation() {
    let valid;
    const emailValue = email.value;
    const validEmail = (email) => {
      return String(email)
        .toLowerCase()
        .match(
          /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
        );
    };
    if (validEmail(emailValue)) {
      emailError.classList.add('hidden');
      email.classList.remove('border-pink');
      valid = true;
    } else {
      emailError.classList.remove('hidden');
      email.classList.add('border-pink');
      valid = false;
    }
    return valid;
  }

  function messageValidation() {
    let valid;
    const messageValue = message.value;
    if (messageValue.length >= 20) {
      messageError.classList.add('hidden');
      message.classList.remove('border-pink');
      valid = true;
    } else {
      messageError.classList.remove('hidden');
      message.classList.add('border-pink');
      valid = false;
    }
    return valid;
  }
</script>

