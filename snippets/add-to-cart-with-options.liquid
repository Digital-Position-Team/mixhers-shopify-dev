{% assign subscribe_save_text = product.metafields.rebrand.subscribe_save_text.value | default: 'subscribe_save_text' %}
{% assign small_text_for_subscribe_label = product.metafields.rebrand.small_text_for_subscribe_label | default: null %}
{% assign show_with_code_text_next_to_slash_out_price_on_pdps = promo_content.show_with_code_text_next_to_slash_out_price_on_pdps | default: false %}
{% assign default_variant = product.metafields.rebrand.default_variant.value %}
{% assign hsa_on =  product.metafields.rebrand.hsa_on.value | default: false %}
{% assign show_extra_subscribe_box_text = promo_content.show_extra_subscribe_box_text | default: false %}
{% assign extra_subscribe_box_text = promo_content.extra_subscribe_box_text %}

{% if product.tags contains "only_allow_one_in_cart" %}
    {% assign only_allow_one_in_cart = true %}
{% else %}
    {% assign only_allow_one_in_cart = false %}
{% endif %}
{% assign filtered_variants_array = '' %}
{% comment %} For bundle products, only add bundle variants to the array {% endcomment %}
{% if is_bundle_product %}
  {% for variant in product.variants %}
    {% if variant.metafields.rebrand.is_bundle_variant == true %}
        {% assign filtered_variants_array = filtered_variants_array | append: variant.id | append: ',' %}
    {% endif %}
  {% endfor %}
{% else %}
{% comment %} For non-bundle products, only add variants to the array if they aren't hidden {% endcomment %}
    {% for variant in product.variants %}
      {% if variant.metafields.custom.hide_variant != true %}
        {% assign filtered_variants_array = filtered_variants_array | append: variant.id | append: ',' %}
      {% endif %}
    {% endfor %}
{% endif %}

<form id="pdp-form">
    <div class="add-to-cart-options">
      <div id="purchase-options" class="hidden">
        <div class="purchase-option-box">
          <label>
           <div class="purchase-option-label">
              <input type="radio" name="purchaseType" value="one_time_purchase">
              <div class="inner-purchase-row">
                <span>One-time purchase</span>
               {% if show_slashed_out_promo_pricing_on_pdps %}
      			  <div>
      			    <span id="one-time-sale-price" class="text-pink">{{ one_time_sale_price }}</span>
      			    <span id="one-time-price" class="line-through">{{ one_time_price }}</span>
      			    {% if promo_discount_code and show_with_code_text_next_to_slash_out_price_on_pdps %}
      			      <span class="text-pink">{{ 'with code ' | append: promo_discount_code }}</span>
      			    {% endif %}
      			  </div>
      			{% else %}
      			  <span id="one-time-price">{{ one_time_price }}</span>
      			{% endif %}
              </div>
          </div>
          </label>
          <hr>
          <label>
            <div class="purchase-option-label">
            <input type="radio" name="purchaseType" value="subscription" checked>
            <div class="inner-purchase-row">
              <span>{{ subscribe_save_text }}</span>
              {% if small_text_for_subscribe_label %}
                <span>{{ small_text_for_subscribe_label }}</span>
              {% endif %}

              {% if show_slashed_out_promo_pricing_on_pdps %}
                 <span>
                  <span id="subscription-sale-price" class="text-pink">{{ subscription_sale_price }}</span>
                  <span id="subscribe-and-save-compare-price" class="line-through">{{ subscription_compare_at_price }}</span>
                 </span>
                {% if promo_discount_code and show_with_code_text_next_to_slash_out_price_on_pdps %}
                  <span class="text-pink" style="font-size:10px">{{ 'with code ' | append: promo_discount_code }}</span>
                {% endif %}
              {% else %}
                {% if subscription_price != subscription_compare_at_price %}
                  <span>
                    <span id="subscription-price" class="text-pink">{{ subscription_price }}</span>
                    <span id="subscribe-and-save-compare-price" class="line-through">{{ subscription_compare_at_price }}</span>
                  </span>
                {% else %}
                  <span id="subscription-price">{{ subscription_price }}</span>
                {% endif %}
              {% endif %}
           </div>
          </div>
            <div class="more-info-subscription">
              {% if show_extra_subscribe_box_text %}
                <p class="bold-uppercase-text">{{ extra_subscribe_box_text }}</p>
              {% endif %}
           
            <!-- subscription features==================== -->
              {% render 'standard-subscription-features' %}
            <!-- subscription features end================-->
            </div>
          </label>
        </div>
      </div>

      {% if hsa_on %}
        <div class="hsa-div">
          <span>HSA Reimbursement Eligible</span>
          <span class="tooltip">
            <svg width="16" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg">
              <path fill="#ff59e4" stroke="#ff59e4" stroke-width="0.5" d="M22 34h4v-12h-4v12zm2-30c-11.05 0-20 8.95-20 20s8.95 20 20 20 20-8.95 20-20-8.95-20-20-20zm0 36c-8.82 0-16-7.18-16-16s7.18-16 16-16 16 7.18 16 16-7.18 16-16 16zm-2-22h4v-4h-4v4z"></path>
            </svg>
            <div class="tooltiptext">
              <span class="extra-mobile-hsa-link">HSA/FSA eligible at checkout.</span>
              <span><span class="text-pink">* </span>For <span class="text-pink">subscriptions</span>, reach out to help@mixhers.com</span>
            </div>
          </span>
        </div>
      {% endif %}

      {% if show_promo_below_purchase_options %}
        <div>
          <span>
            <span>{{ promo_first_text }}</span>
            {% if promo_discount_code %}
              <span>{{ promo_discount_code }}</span>
            {% endif %}
            <span>{{ promo_last_text }}</span>
          </span>
        </div>
      {% endif %}

      <div id="bundle-pricing" class="hidden">
        <p class="select-option-title">Pick your flavors</p>
        <div class="options-wrapper-gap">
          <div class="select-wrapper">
            <div id="flavor-color" class="flavor-color"></div>
            <select name="first-flavor">
              <option disabled selected value>Pick your first flavor</option>
              {% for variant in product.variants %}
                {% if variant.metafields.rebrand.is_bundle_variant != true %}{% continue %}{% endif %}
                {% assign variant_out_of_stock = false %}
                {% if variant.metafields.variant.outofstock == 'true' %}
  {% assign variant_out_of_stock = true %}
{% elsif variant.inventory_quantity < 1 %}
  {% if variant.inventory_management == 'shopify' and variant.inventory_policy == 'deny' %}
    {% assign variant_out_of_stock = true %}
  {% endif %}
{% endif %}
                <option value="{{ variant.id }}" data-flavor="{{ variant.options[0] }}" data-quantity="{{ variant.options[1] }}" data-color="{{ variant.metafields.rebrand.bubble.value | default: "transparent" }}" data-title="15 x {{ variant.options[0] }}" data-out-of-stock="{{ variant_out_of_stock }}" {% if variant_out_of_stock %}disabled{% endif %} {% if default_variant.id == variant.id and variant_out_of_stock == false %}selected{% endif %}>
                  15 x {{ variant.options[0] }}{% if variant_out_of_stock %} (Out of Stock){% endif %}
                </option>
              {% endfor %}
            </select>
          </div>

          <div class="select-wrapper">
            <div id="flavor-color" class="flavor-color"></div>
            <select name="second-flavor">
              <option disabled selected value>Pick your second flavor</option>
              {% for variant in product.variants %}
                {% if variant.metafields.rebrand.is_bundle_variant != true %}{% continue %}{% endif %}
                {% assign variant_out_of_stock = false %}
                {% if variant.metafields.variant.outofstock == 'true' %}
  {% assign variant_out_of_stock = true %}
{% elsif variant.inventory_quantity < 1 %}
  {% if variant.inventory_management == 'shopify' and variant.inventory_policy == 'deny' %}
    {% assign variant_out_of_stock = true %}
  {% endif %}
{% endif %}
                <option value="{{ variant.id }}" data-flavor="{{ variant.options[0] }}" data-quantity="{{ variant.options[1] }}" data-color="{{ variant.metafields.rebrand.bubble.value | default: "transparent" }}" data-title="15 x {{ variant.options[0] }}" data-out-of-stock="{{ variant_out_of_stock }}" {% if variant_out_of_stock %}disabled{% endif %}>
                  15 x {{ variant.options[0] }}{% if variant_out_of_stock %} (Out of Stock){% endif %}
                </option>
              {% endfor %}
            </select>
          </div>

          <button type="submit" class="btn btn-pink shadow add-to-cart-btn">Add to cart</button>
        </div>
      </div>

      <div id="single-variant-pricing" class="hidden">
        <button type="submit" class="btn btn-pink shadow add-to-cart-btn">Add to cart</button>
        {% if show_slashed_out_promo_pricing_on_pdps %}
          <div id="one-time-purchase-only-promo-text-single-variant" class="hidden">
            <span id="sale-price-single-variant"></span>
            {% if promo_discount_code %}
              <span>with code</span>
              <span>{{ promo_discount_code }}</span>
            {% endif %}
          </div>
        {% endif %}
      </div>

      <div id="multiple-variant-pricing" class="hidden">
        <p class="select-option-title">Pick an option</p>
       <div class="options-wrapper-gap">
        <div class="select-wrapper">
          <select name="flavor">
            <option disabled selected>Choose an option</option>
            {% for variant in product.variants %}
              {% if variant.metafields.custom.hide_variant == true %}{% continue %}{% endif %}
              {% assign variant_out_of_stock = false %}

{% if variant.metafields.variant.outofstock == 'true' %}
  {% assign variant_out_of_stock = true %}
{% elsif variant.inventory_quantity < 1 %}
  {% if variant.inventory_management == 'shopify' %}
    {% assign variant_out_of_stock = true %}
  {% endif %}
{% endif %}

              <option value="{{ variant.id }}" data-flavor="{{ variant.options[0] }}" data-quantity="{{ variant.options[1] }}" data-color="{{ variant.metafields.rebrand.bubble.value | default: "transparent" }}" data-out-of-stock="{{ variant_out_of_stock }}" data-price="{{ variant.price }}" data-subscription-price="{{ variant.selling_plan_allocations.first.price }}" data-subscribe-and-save-compare-price="{{ variant.selling_plan_allocations.first.compare_at_price }}" {% if variant_out_of_stock %}disabled{% endif %} {% if default_variant.id == variant.id and variant_out_of_stock == false %}selected{% endif %}>
                {{ variant.options[0] }}{% if variant_out_of_stock %} (Out of Stock){% endif %}
              </option>
            {% endfor %}
          </select>
        </div>
        <div>
          <button type="submit" class="btn btn-pink shadow add-to-cart-btn">Add to cart</button>
          {% if show_slashed_out_promo_pricing_on_pdps %}
            <div id="one-time-purchase-only-promo-text" class="hidden">
              {% if promo_discount_percentage %}
                <span id="sale-price-multiple-variant"></span>
              {% endif %}
              {% if promo_discount_code and show_with_code_text_next_to_slash_out_price_on_pdps %}
                <span>with code</span>
                <span>{{ promo_discount_code }}</span>
              {% endif %}
            </div>
          {% endif %}
        </div>
      </div>
      </div>
    </div>
</form>
<style>
  

  
</style>
<script src="https://static.rechargecdn.com/assets/storefront/recharge-client-1.17.3.min.js"></script>

<script>
    const starterKitOneVariantId = '43284002865331';
    const starterKitTwoVariantId = '43827218645171';
    const starterKitMessageOne = "Display Box and Frother";
    const starterKitMessageTwo = "Frother";
    const discount_percentage = {{ promo_discount_percentage | json }};

  console.log("i started");
    function getSalePrice(price) {
        const discount = price * discount_percentage;
        return price - discount;
    }

    function formatPrice(price) {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD'
        }).format(price / 100);
    }


    (function () {
        // DATA
        const isBundleProduct = {{ is_bundle_product }};
        const sellingPlanId = {{ selling_plan_id | json }};
        const allVariants = {{ product.variants | json }};
        const filteredVariantsArray = {{ filtered_variants_array | json }}.split(',');
        const filteredVariants = allVariants.filter(function(variant) {
            return filteredVariantsArray.includes(variant.id.toString())
        });
        const isSingleVariantProduct = {{ is_single_variant_product }}
        const isMultipleVariantProduct = filteredVariants.length > 1;
        const onlyOneAllowedInCart = {{ only_allow_one_in_cart }};
console.log(isBundleProduct,"isBundleProduct---");
      console.log(sellingPlanId,"sellingPlanId---");
      console.log(allVariants,"allVariants---");
        // SELECTORS
        const form = $('#pdp-form');
        const bundlePricingEl = $('#bundle-pricing');
        const singleVariantPricingEl = $('#single-variant-pricing');
        const multipleVariantPricingEl = $('#multiple-variant-pricing');
        const purchaseOptionsEl = $('#purchase-options');

        // FUNCTIONS
        async function handleAddToCart({variant, cartData}) {
            if (onlyOneAllowedInCart || variant.price === 0) {
                const response = await fetch('/cart.js', { cache: 'no-store' });
                if (!response.ok) {
                  console.log('Could not fetch cart data');
                }
                const cart = await response.json();
                console.log('Cart:', cart);
                let variantInCart = cart.items.find(item => item.variant_id === variant.id);
                if (variantInCart) {
                    Rebuy.SmartCart.show();
                    return;
                }
            }
            await fetch('/cart/add.js', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(cartData),
            });
        }

        async function addBundleProductToCart() {
            const isSubscription = sellingPlanId && purchaseOptionsEl.find('input[name="purchaseType"]:checked').val() === 'subscription';
            const subscriptionData = isSubscription ? { selling_plan: sellingPlanId } : {};
            const firstFlavorSelectEl = bundlePricingEl.find('select').eq(0);
            const secondFlavorSelectEl = bundlePricingEl.find('select').eq(1);
            const firstSelectedFlavorOption = firstFlavorSelectEl.find(':selected');
            const secondSelectedFlavorOption = secondFlavorSelectEl.find(':selected');
            const firstFlavorName = firstSelectedFlavorOption.data('flavor')
            const secondFlavorName = secondSelectedFlavorOption.data('flavor');
            const firstFlavorQuantity = firstSelectedFlavorOption.data('quantity');
            const secondFlavorQuantity = secondSelectedFlavorOption.data('quantity');
            const firstFlavorColor = firstSelectedFlavorOption.data('color');
            const secondFlavorColor = secondSelectedFlavorOption.data('color');
            const starterKitVariantId = "{{ bundle_product.metafields.rebrand.experience_box.value.id }}";
            const getsStarterKitMessage = starterKitVariantId === starterKitOneVariantId;


            const bundleProductData = {
                variantId: "{{ bundle_product.variants[0].id }}",
                productId: "{{ bundle_product.id }}",
                sellingPlan: sellingPlanId,
                sideCartSubtitle: "{{ bundle_product.metafields.rebrand.side_cart_subtitle.value }}",
                starterKitVariantId: starterKitVariantId
            };

            const bundle = {
                externalVariantId: bundleProductData.variantId,
                externalProductId: bundleProductData.productId,
                selections: [
                    {
                        collectionId: "{{ bundle_collection.id }}",
                        externalProductId: "{{ product.id }}",
                        externalVariantId: parseInt(firstFlavorSelectEl.val()),
                        quantity: 1
                    },
                    {
                        collectionId: "{{ bundle_collection.id }}",
                        externalProductId: "{{ product.id }}",
                        externalVariantId: parseInt(secondFlavorSelectEl.val()),
                        quantity: 1
                    }
                ]
            };

            // https://storefront.rechargepayments.com/client/docs/methods/bundle/overview/
            const rbId = await recharge.bundle.getBundleId(bundle);
            let cartData;
            if (getsStarterKitMessage && isSubscription){
                cartData = {
                    items: [{
                        id: bundleProductData.variantId,
                        quantity: 1,
                        properties: {
                            _rb_id: rbId,
                            "Contains": `${firstFlavorName} x ${firstFlavorQuantity}, ${secondFlavorName} x ${secondFlavorQuantity}`,
                            "Free Starter Kit": `${starterKitMessageOne}`,
                            _contentsData: [{flavor: firstFlavorName, quantity: firstFlavorQuantity, color: firstFlavorColor}, {flavor: secondFlavorName, quantity: secondFlavorQuantity, color: secondFlavorColor}],
                            _bundle_contents_quantity: 30,
                            _side_cart_subtitle: bundleProductData.sideCartSubtitle,
                            _starterKitVariantId: bundleProductData.starterKitVariantId
                        },
                        ...subscriptionData,
                    }]
                };
            } else {
                cartData = {
                    items: [{
                        id: bundleProductData.variantId,
                        quantity: 1,
                        properties: {
                            _rb_id: rbId,
                            "Contains": `${firstFlavorName} x ${firstFlavorQuantity}, ${secondFlavorName} x ${secondFlavorQuantity}`,
                            _contentsData: [{flavor: firstFlavorName, quantity: firstFlavorQuantity, color: firstFlavorColor}, {flavor: secondFlavorName, quantity: secondFlavorQuantity, color: secondFlavorColor}],
                            _bundle_contents_quantity: 30,
                            _side_cart_subtitle: bundleProductData.sideCartSubtitle,
                            _starterKitVariantId: bundleProductData.starterKitVariantId
                        },
                        ...subscriptionData,
                    }]
                };
            }

            await handleAddToCart({variant: {{ bundle_product.variants[0] | json }}, cartData});
        }

        async function addSingleVariantProductToCart() {
            const isSubscription = sellingPlanId && purchaseOptionsEl.find('input[name="purchaseType"]:checked').val() === 'subscription';
            const subscriptionData = isSubscription ? { selling_plan: sellingPlanId } : {};
            const starterKitVariantId = "{{ product.metafields.rebrand.experience_box.value.id }}";
            const singleVariant = filteredVariants[0];
            const singleVariantName = singleVariant.title;
            const singleVariantColor = singleVariant.metafields?.rebrand?.bubble?.value || 'transparent';
            const getsStarterKitMessage = starterKitVariantId === starterKitTwoVariantId;
            let cartData;
            if (getsStarterKitMessage && isSubscription){
                cartData = {
                    ...subscriptionData,
                    id: singleVariant.id,
                    quantity: 1,
                    properties: {
                        "Free Starter Kit": starterKitMessageTwo,
                        _contentsData: [{flavor: singleVariantName, color: singleVariantColor}],
                        _starterKitVariantId: starterKitVariantId
                    },
                };
            } else {
                cartData = {
                    ...subscriptionData,
                    id: singleVariant.id,
                    quantity: 1,
                    properties: {
                        _contentsData: [{flavor: singleVariantName, color: singleVariantColor}],
                        _starterKitVariantId: starterKitVariantId
                    },
                };
            }
            await handleAddToCart({variant: singleVariant, cartData});
        }

        async function addMultipleVariantProductToCart() {
            const selectEl = multipleVariantPricingEl.find('select');
            const selectedOption = selectEl.find(':selected');
            const selectedVariant = filteredVariants.find(variant => variant.id === parseInt(selectEl.val()));
            const flavorName = selectedOption.data('flavor')
            const flavorColor = selectedOption.data('color');
            const isSubscription = sellingPlanId && purchaseOptionsEl.find('input[name="purchaseType"]:checked').val() === 'subscription';
            const subscriptionData = isSubscription ? { selling_plan: sellingPlanId } : {};
            const starterKitVariantId = "{{ product.metafields.rebrand.experience_box.value.id }}";
            const getsStarterKitMessage = starterKitVariantId === starterKitTwoVariantId;
            let cartData;
            if (getsStarterKitMessage && isSubscription){
                cartData = {
                    ...subscriptionData,
                    id: selectedVariant.id,
                    quantity: 1,
                    properties: {
                        "Free Starter Kit": starterKitMessageTwo,
                        _contentsData: [{flavor: flavorName, color: flavorColor}],
                        _starterKitVariantId: starterKitVariantId
                    },
                };
            } else {
                cartData = {
                    ...subscriptionData,
                    id: selectedVariant.id,
                    quantity: 1,
                    properties: {
                        _contentsData: [{flavor: flavorName, color: flavorColor}],
                        _starterKitVariantId: starterKitVariantId
                    },
                };
            }
            await handleAddToCart({variant: selectedVariant, cartData});
        }

        function initBundleProduct() {
            const firstFlavorSelectEl = bundlePricingEl.find('select').eq(0);
            const secondFlavorSelectEl = bundlePricingEl.find('select').eq(1);

            function updateFlavorColors() {
                firstFlavorSelectEl.siblings('.flavor-color').css('background-color', firstFlavorSelectEl.find(':selected').data('color'));
                secondFlavorSelectEl.siblings('.flavor-color').css('background-color', secondFlavorSelectEl.find(':selected').data('color'));
            }

            // Set flavor colors on select change
            firstFlavorSelectEl.on('change', function () {
                updateFlavorColors();
            });
            secondFlavorSelectEl.on('change', function () {
                updateFlavorColors();
            });
            updateFlavorColors();

            form.on('submit', async function (e) {
                e.preventDefault();
                
                // Validate that both flavors are selected
                if (!firstFlavorSelectEl.val() || !secondFlavorSelectEl.val()) {
                    return; // Don't proceed if selections are missing
                }
                
                const submitButton = bundlePricingEl.find('button');
                const submitButtonText = submitButton.text();
                submitButton.prop('disabled', true).text('Loading...').css('opacity', 0.5);
                await addBundleProductToCart();
                submitButton.prop('disabled', false).text(submitButtonText).css('opacity', 1);
            });

            firstFlavorSelectEl.prop("required", true);
            secondFlavorSelectEl.prop("required", true);
            if (sellingPlanId) purchaseOptionsEl.removeClass('hidden');
            else bundlePricingEl.find('button').text(`Add to cart - {{ one_time_price }}`)

            bundlePricingEl.removeClass('hidden');
        }

        function initSingleVariantProduct(product) {
            const oneTimeSalePriceEl = purchaseOptionsEl.find('#one-time-sale-price');
            const oneTimePriceEl = purchaseOptionsEl.find('#one-time-price');
            const subscriptionSalePriceEl = purchaseOptionsEl.find('#subscription-sale-price');
            const subscriptionPriceEl = purchaseOptionsEl.find('#subscription-price');
            const price = filteredVariants[0].price;
            const formattedPrice = formatPrice(price);
            const subscriptionPrice = filteredVariants[0]?.selling_plan_allocations?.[0]?.price;
            const formattedSubscriptionPrice = formatPrice(subscriptionPrice);
            const salePrice = formatPrice(getSalePrice(price));
            const subscriptionSalePrice = formatPrice(getSalePrice(subscriptionPrice));
            const subscriptionCompareAtPrice = filteredVariants[0]?.selling_plan_allocations?.[0]?.compare_at_price;
            const subscribeAndSaveComparePriceEl = purchaseOptionsEl.find('#subscribe-and-save-compare-price');

            // Set variant price
            function updatePrices() {
                oneTimeSalePriceEl.text(salePrice);
                oneTimePriceEl.text(formattedPrice);
                subscriptionSalePriceEl.text(subscriptionSalePrice);
                subscriptionPriceEl.text(formattedSubscriptionPrice);
                subscribeAndSaveComparePriceEl.text(formatPrice(subscriptionCompareAtPrice));
            }
            updatePrices();

            form.on('submit', async function (e) {
                e.preventDefault();
                const submitButton = singleVariantPricingEl.find('button');
                const submitButtonText = submitButton.text();
                submitButton.prop('disabled', true).text('Loading...').css('opacity', 0.5);
                await addSingleVariantProductToCart();
                submitButton.prop('disabled', false).text(submitButtonText).css('opacity', 1);
            });
            if (sellingPlanId && !product.tags.includes('disable-subscribe-on-pdp')){
              console.log(product.tags,"should remove")
                purchaseOptionsEl.removeClass('hidden');
                if (subscriptionCompareAtPrice) {
                    subscribeAndSaveComparePriceEl.text(formatPrice(subscriptionCompareAtPrice));
                }
            } else {
                singleVariantPricingEl.find('button').text(`Add to cart - ${formattedPrice}`)
                const oneTimePurchaseOnlyPromoTextEl = document.getElementById('one-time-purchase-only-promo-text-single-variant');
                const singleSalePriceEl = document.getElementById('sale-price-single-variant');
                if (oneTimePurchaseOnlyPromoTextEl) {
                    singleSalePriceEl.textContent = salePrice
                    oneTimePurchaseOnlyPromoTextEl.classList.remove('hidden')
                    oneTimePurchaseOnlyPromoTextEl.classList.add('flex')
                }
            }
            singleVariantPricingEl.removeClass('hidden');
        }

        function initMultipleVariantProduct() {
            const oneTimeSalePriceEl = purchaseOptionsEl.find('#one-time-sale-price');
            const oneTimePriceEl = purchaseOptionsEl.find('#one-time-price');
            const subscriptionSalePriceEl = purchaseOptionsEl.find('#subscription-sale-price');
            const subscriptionPriceEl = purchaseOptionsEl.find('#subscription-price');
            const flavorSelectEl = multipleVariantPricingEl.find('select');
            
            function updatePrices() {
                const selectedOption = flavorSelectEl.find(':selected');
                const price = selectedOption.data('price');
                const subscriptionPrice = selectedOption.data('subscription-price');
                const subscribeAndSaveComparePrice = selectedOption.data('subscribe-and-save-compare-price');
                
                // Only update if we have a valid price (option is selected)
                if (price !== undefined) {
                    const salePrice = getSalePrice(price);
                    const subscriptionSalePrice = getSalePrice(subscriptionPrice);
                    
                    oneTimeSalePriceEl.text(formatPrice(salePrice));
                    oneTimePriceEl.text(formatPrice(price));
                    subscriptionSalePriceEl.text(formatPrice(subscriptionSalePrice));
                    subscriptionPriceEl.text(formatPrice(subscriptionPrice));
                    subscribeAndSaveComparePriceEl.text(formatPrice(subscribeAndSaveComparePrice));
                    if (!sellingPlanId) multipleVariantPricingEl.find('button').text(`Add to cart - ${formatPrice(price)}`);
                } else {
                    // No option selected yet, show just "Add to cart"
                    if (!sellingPlanId) multipleVariantPricingEl.find('button').text('Add to cart');
                }
            }

            // Set variant prices on select change
            flavorSelectEl.on('change', function () {
                updatePrices();
            });
            updatePrices();

            form.on('submit', async function (e) {
                e.preventDefault();
                
                // Validate that an option is selected
                if (!flavorSelectEl.val()) {
                    return; // Don't proceed if no selection
                }
                
                const submitButton = multipleVariantPricingEl.find('button');
                const submitButtonText = submitButton.text();
                submitButton.prop('disabled', true).text('Loading...').css('opacity', 0.5);
                await addMultipleVariantProductToCart();
                submitButton.prop('disabled', false).text(submitButtonText).css('opacity', 1);
            });

            flavorSelectEl.prop("required", true);
            if (sellingPlanId){
                purchaseOptionsEl.removeClass('hidden');
            } else {
                const oneTimePurchaseOnlyPromoTextEl = document.getElementById('one-time-purchase-only-promo-text');
                const salePriceEl = document.getElementById('sale-price-multiple-variant');
                if (oneTimePurchaseOnlyPromoTextEl) {
                    salePriceEl.textContent = formatPrice(salePrice);
                    oneTimePurchaseOnlyPromoTextEl.classList.remove('hidden');
                    oneTimePurchaseOnlyPromoTextEl.classList.add('flex');
                }
            }
            multipleVariantPricingEl.removeClass('hidden');
        }

        function init() {
            // START Variables for Debugging in the DevTools Console
            const product = {{ product | json }};
            const bundleProduct = {{ bundle_product | json }};
            // END Variables for Debugging in the DevTools Console
            if (isBundleProduct) {
              console.log("initBundleProduct will run ");
                initBundleProduct();
            } else if (isSingleVariantProduct) {
              console.log("should run function isSingleVariantProduct");
                initSingleVariantProduct(product);
            } else if (isMultipleVariantProduct) {
              console.log("initMultipleVariantProduct will run ");
                initMultipleVariantProduct();
            } else {
                console.error('Product is not a bundle, single variant, or multiple variant product');
            }
        }

        init();
    })();
</script>