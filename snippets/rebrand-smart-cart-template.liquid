{{ 'rebrand-smart-cart-template.css' | asset_url | stylesheet_tag }}
<!-- Fonts -->

{% assign promo_metaobject = shop.metaobjects.side_cart_promo_text.side-cart-promo | default: null %}
{% assign disabled_link_products_metaobject = shop.metaobjects.product_group.disabled-side-cart-link-products | default: null %}

<script>
  //get the product id from the GIDs
  const disabledLinkProductIds = {{ disabled_link_products_metaobject | json }}.list.map((id) => parseInt(id.slice(-13)));

  const promo = {{ promo_metaobject | json }};

  const starterKitOneId = '43284002865331' //stick starter kit
  const starterKitTwoId = '43827218645171' //powder starter kit

  const events = [
    'rebuy:smartcart.line-item-increase',
    'rebuy:cart.add',
    'rebuy:smartcart.line-item-decrease',
    'rebuy:smartcart.line-item-removed',
    'rebuy:smartcart.show', //I'm not sure this is necessary
    'rebuy:cart.change', // I think this might be the only event that triggers when REDO is toggled
  ]

  events.forEach((eventType) => {
      document.addEventListener(eventType, (event) => renderCartSubtotal({event}));
      document.addEventListener(eventType, (event) => removeStarterKitFromCartIfCached({event}));
  })

  document.addEventListener('rebuy:cart.add', (event) => addGiftWithPurchaseData({event}));


  function renderCartSubtotal() {
    const cart = window.Rebuy.Cart.cart;
    if (cart){
      const newSubtotal = cart.items_subtotal_price / 100;
      const subtotalEl = document.getElementById('subtotal-el');
      const formatter = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      });

      const formattedNewSubtotal = formatter.format(newSubtotal);
      if (subtotalEl){
        subtotalEl.textContent = formattedNewSubtotal;
      }
    }
  }

  /**
  * @param {object} event - event object.
  */
  function getItem(event){
    let item;
    if (event?.detail.item) {
      if (event.detail.item.items) {
        item = event.detail.item.items[0]
      } else if (event.detail.item.properties) {
        item = event.detail.item
      } else {
        return;
      }
    }
    return item;
  }

  /**
  * @param {object} event - event object.
  */
  function addGiftWithPurchaseData({event}){
    const item = getItem(event);
    const isGiftWithPurchase = item.properties?._attribution === "Rebuy Tiered Progress Bar";
    if (isGiftWithPurchase){
      setTimeout(() => {
        const Cart = window.Rebuy.Cart;
        const giftWithPurchase = Cart.cart.items.find(cartItem => cartItem.variant_id === item.variant_id && cartItem.properties?._attribution === "Rebuy Tiered Progress Bar");
        if (!giftWithPurchase) {
          console.error('Gift with purchase not found in cart');
          return;
        }
        const giftFlavor = giftWithPurchase.variant_options[0];
        const giftColorJson = giftWithPurchase.product?.selected_variant?.metafields?.rebrand?.color ?? giftWithPurchase.product?.selected_variant?.metafields?.custom?.bubble;
        const giftColor = giftColorJson ? JSON.parse(giftColorJson)[0] : null;
        try {
          Cart.changeItem({ ...giftWithPurchase, properties: { ...giftWithPurchase.properties, _contentsData: [{flavor: giftFlavor, color: giftColor }] } });
        } catch (error) {
          console.error('Error adding properties to gift with purchase: ', error);
        }
      }, 800);
    }
  }

  function getSubtotalLabelAndItemCount() {
    const cart = window.Rebuy.Cart.cart;
    const itemCount = cart?.item_count;
    return `Subtotal (${itemCount} items)`;
  }

  /**
  * @param {object} itemFromBtn - item added to cart via the subscribe button in side cart
  */
  function handleSubscribeAndSave({itemFromBtn}) {
    let Cart = window.Rebuy.Cart;
    let frequency = itemFromBtn.product.subscription_frequencies[0];
    Cart.switchToSubscription(itemFromBtn, frequency);
  }

  // Update cart icon count
  let cartItemCount = 0;
  document.addEventListener('rebuy:smartcart.hide', function(event){
    let newCartItemCount = event.detail.smartcart.cart.item_count;
    document.querySelectorAll('.Header-navCartCount').forEach((el) => {
      el.textContent = newCartItemCount;
    });
  });

  // Remove starter kit from cart if cached, this is to prevent customers from checking out with a starter kit, since we add kits post-checkout now with a Shopify Flow
  function removeStarterKitFromCartIfCached() {
    const Cart = window.Rebuy.Cart;
    const cartItems = Cart.cart.items;
    for (let item of cartItems){
      if (item.variant_id === 43284002865331 || item.variant_id === 43827218645171){
        Cart.removeItem(item);
      }
    }
  }

  function handleCheckout(){
    let Cart = window.Rebuy.Cart;
    removeStarterKitFromCartIfCached();
    Cart.checkout();
  }

  // Adds Experience Box Item for old Hertime product subscriptions
  function addExperienceBox(cartItem, altSubProduct, SmartCart) {
    let data = {
      id: altSubProduct.id,
      quantity: cartItem.quantity,
      selling_plan: altSubProduct.selling_plan_allocations[0].selling_plan_id,
      properties: {
        '_sticks': cartItem.properties._sticks
      }
    }
    let options = {
      subscription_frequency: 1,
      subscription_interval: "month"
    }
    SmartCart.removeItem(cartItem);
    SmartCart.addItem(data, options);
  }

  function checkLimitQty(product, cart) {
    if(product.quantity > 1) {
      cart.decreaseItem(product);
    }
  }
  document.addEventListener('rebuy:cart.change', (event) => {
    let items = event.detail.cart.cart.items;
    let Cart = event.detail.cart;
    let altSubProducts = [{{ altSubProducts }}];

    for(let j = 0; j < items.length; j++) {
      let isSub = Cart.isSubscription(items[j]);
      let variantId = items[j].variant_id;

      if ([42910412243123, 43051276861619].includes(variantId)) {
        checkLimitQty(items[j], Cart);
      }

      if(isSub) {
        for(let i = 0; i < altSubProducts.length; i++) {
          if(variantId === altSubProducts[i].id) {
            addExperienceBox(items[j], altSubProducts[i].metafield, Cart);
          }
        }
      }
    }
  });

</script>

{% raw %}

  <div id="rebuy-cart" class="rebuy-cart" v-cloak
    v-bind:class="[visible ? 'is-visible' : '', 'currency-' + currency()]">
    <div class="rebuy-cart__flyout w-[450px]">
      <div class="rebuy-cart__order-summary w-full">
        <div class="flex justify-between items-center w-full py-[16px]">
          <div class="rebuy-cart__flyout-header-content flex w-full justify-between items-center">
            <h4 class="rebuy-cart__flyout-title text-serif px-[16px] text-[20px] font-normal leading-[22px]"
              v-html="settings.language.cart_title">
            </h4>
            <button id="rebuy-close-btn" class="rebuy-cart__flyout-close" type="button" aria-label="Close Smart Cart"
              v-on:click="hide()">
              <svg class="absolute focus-visible:ring-1 focus-visible:ring-offset-2" width="100%" height="100%"
                viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M23.4377 6.56271L6.56274 23.4377" stroke="#1a1a1a" stroke-width="2" stroke-linecap="round"
                  stroke-linejoin="round" />
                <path d="M23.4377 23.4377L6.56274 6.56271" stroke="#1a1a1a" stroke-width="2" stroke-linecap="round"
                  stroke-linejoin="round" />
              </svg>
            </button>
          </div>
        </div>
        
        <div class="rebuy-cart__flyout-announcement-bar" id="rebuy-smart-cart-announcement-bar"
          v-if="announcementBarEnabled()">
          <div class="rebuy-cart__flyout-announcement-bar-message"
            v-for="(message, index) in settings.announcement_bar.messages" :key="index" v-html="message"></div>
        </div>
        <div v-if="progressBarEnabled()" class="rebuy-cart__progress-bar-container above">
          <div v-for="(bar, index) in settings.progress_bar.bars" :key="index">
            <div v-if="isValidBar(bar)">
              <div class="rebuy-cart__progress-step-wrapper pb-[16px]" v-bind:class="['count-' + bar.tiers.length]">
                <div v-for="(tier, index) in bar.tiers" :key="index" class="rebuy-cart__progress-step"
                  v-bind:style="{ width: progressStepMaxWidth(bar) }"
                  v-bind:class="[progressTierReached(tier) ? 'complete' : '']">
                  <div class="rebuy-cart__progress-step-icon" v-html="progressTierIcon(tier)"></div>
                  <span class="rebuy-cart__progress-step-label">{{ getTierLabel(tier) }}</span>
                </div>
              </div>

              <div
                class="rebuy-cart__progress-bar-wrapper max-w-10/12 flex flex-col justify-center items-center py-[16px] border-b border-t border-black">
                <div class="rebuy-cart__progress-bar-meter outline max-w-10/12 h-[12px] rounded-[50px] bg-transparent"
                  v-bind:class="[hasTierProgress() ? 'has-progress' : 'no-progress']">
                  <div class="rebuy-cart__progress-bar-meter-fill align-middle"
                    v-bind:style="{ width: tiersPercentageComplete(bar) }">
                    <span class="sr-only">{{ tiersPercentageComplete(bar) }}</span>
                  </div>
                </div>

                <div class="rebuy-cart__progress-bar-prompt font-sans" v-if="hasProgressPrompt(bar)"
                  v-html="getTierFeedbackText(bar)"></div>
              </div>
            </div>
          </div>
        </div>


        <div class="rebuy-cart__flyout-body custom-padding">
          <div class="rebuy-cart__flyout-shipping-bar" v-if="freeShippingEnabled()"
            v-bind:class="[freeShippingHelperMessage() ? 'has-helper' : '', hasFreeShipping() ? 'has-free-shipping' : '']">
            <div class="rebuy-cart__flyout-shipping-bar-message body-7" v-if="!hasFreeShipping()"
              v-html="freeShippingRemainingMessage()"></div>
            <div class="rebuy-cart__flyout-shipping-bar-message body-7" v-if="hasFreeShipping()"
              v-html="freeShippingCompleteMessage()"></div>
            <div class="rebuy-cart__flyout-shipping-bar-meter"
              v-bind:class="[hasFreeShippingProgress() ? 'has-progress' : 'no-progress']">
              <div class="rebuy-cart__flyout-shipping-bar-meter-fill"
                v-bind:style="{ width: freeShippingPercentComplete() }">
                <span class="rebuy-cart__flyout-shipping-bar-meter-fill-text"
                  v-html="freeShippingPercentComplete()"></span>
              </div>
            </div>
            <div class="rebuy-cart__flyout-shipping-bar-helper" v-if="freeShippingHelperMessage()"
              v-html="freeShippingHelperMessage()"></div>
          </div>
          <div class="rebuy-cart__flyout-content" v-bind:class="[hasItems() ? 'has-items' : 'no-items']">
            <div class="rebuy-cart__flyout-items" v-if="hasItems()">
              <div v-for="(item, index) in items()" :key="index"
                v-bind:class="['product-' + item.handle, itemProductTagsClasses(item), itemPropertyClasses(item), 'rebuy-cart__flyout-item']">
                <div class="custom-item-wrapper" v-show="item.handle !== 'free-unlimited-return-for-1-00-via-re-do'">
                  <div class="flex">
                    <div class="rebuy-cart__flyout-item-media">
                      <a v-bind:href="disabledLinkProductIds.includes(item.product_id) ? `#`: itemURL(item)">
                        <img v-bind:src="sizeImage(item.image, '240x240')" v-bind:alt="'View ' + item.product_title" />
                      </a>
                    </div>
                    <div class="custom-item-details">
                      <div class="flex justify-between">
                        <div class="custom-product-title">
                          <a v-bind:href="disabledLinkProductIds.includes(item.product_id) ? `#`: itemURL(item)" v-html="item.product_title"
                            v-bind:alt="'View ' + item.product_title"></a>
                        </div>
                        <div class="custom-product-price">
                          <div class="custom-discount-price" v-if="itemHasDiscount(item)">
                            <span class="rebuy-money compare-at" v-html="formatMoney(compareAtPrice(item))"></span>
                            <span class="text-sale" v-html="formatMoney(itemPrice(item))"></span>
                          </div>
                          <div class="custom-normal-price" v-if="!itemHasDiscount(item)">
                            <span class="rebuy-money" v-html="formatMoney(itemPrice(item))"></span>
                          </div>
                        </div>
                      </div>
                      <span class="custom-subtitle" v-if="item.properties?._side_cart_subtitle" v-html="item.properties?._side_cart_subtitle"></span>
                      <div class="custom-quantity-delivery">
                        <div class="custom-quantity">
                          <span class="custom-quantity-text" v-if="item.properties?._bundle_contents_quantity && !item.product?.tags?.includes('has-no-flavor-variants')"
                            v-html="item.properties._bundle_contents_quantity + ' Sticks'"></span>
                          <span class="custom-quantity-text" v-if="item.variant_options[1] && item.product?.tags?.includes('quantity-in-scoops') && !item.properties?._bundle_contents_quantity && !item.product?.tags?.includes('has-no-flavor-variants')"
                            v-html="item.variant_options[1] + ' Scoops'"></span>
                          <span class="custom-quantity-text" v-if="item.variant_options[1] && !item.product?.tags?.includes('quantity-in-scoops') && !item.properties?._bundle_contents_quantity && !item.product?.tags?.includes('has-no-flavor-variants')"
                            v-html="item.variant_options[1] + ' Sticks'"></span>
                          <span class="custom-quantity-text" v-if="item.product?.tags?.includes('has-no-flavor-variants')"
                            v-html="item.product.selected_variant.option1"></span>
                        </div>
                        <div class="custom-delivery">
                          <span class="custom-delivery-text" v-if="item.product?.id !== 7661853769907 && item.product?.id !== 7661842464947">
                            <span v-if="item.handle !== 'gift-card'">-</span> Delivered
                            <span v-if="item.product.subscription && item.selling_plan_allocation?.selling_plan?.name.slice(name.length - 1) === 's'">
                              {{ item.selling_plan_allocation.selling_plan.name.slice(9) }}
                            </span>
                            <span v-if="item.product.subscription && item.selling_plan_allocation?.selling_plan?.name.slice(name.length - 1) === 'h'">
                              Monthly
                            </span>
                            <span v-if="!item.product.subscription && !item.selling_plan_allocation">Once</span>
                          </span>
                        </div>
                      </div>
                      <!-- Flavor Variant Section (if applicable) -->
                      <div class="custom-flavor-section" v-if="!item.product?.tags?.includes('has-no-flavor-variants')">
                        <!-- Flavor handling code (like your previous flavors handling) -->
                      </div>
                      <div class="custom-item-quantity">
                        <div class="custom-quantity-wrapper">
                          <div class="custom-quantity-label">Quantity</div>
                          <div class="custom-quantity-selection">
                            <button @click="decreaseItem(item)">-</button>
                            <div class="custom-quantity-display">
                              <span v-html="item.quantity"></span>
                            </div>
                            <button @click="increaseItem(item)" :disabled="item.price === 0">+</button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="rebuy-cart__flyout-note" v-if="notesEnabled()">
              <label class="rebuy-cart__flyout-note-toggle">
                <input class="rebuy-cart__flyout-note-toggle-input" type="checkbox"
                  v-model="notes.visible" v-on:click="notesToggle()" />
                <span v-html="settings.language.notes_label"></span>
              </label>
              <div class="rebuy-cart__flyout-note-content" v-if="notesIsVisible()">
                <textarea v-model="notes.value" v-on:keyup="notesChange(event)" v-on:keydown="notesChange(event)"
                  v-on:change="notesChange(event)" v-bind:placeholder="settings.language.notes_placeholder"></textarea>
              </div>
            </div>
            <div class="rebuy-cart__flyout-empty-cart" v-if="!hasItems()" v-html="emptyCartMessage()"></div>
          </div>
        </div>



    <div class="rebuy-cart__fixed-bottom-wrapper custom-full-width">
      <div class="rebuy-cart__flyout-recommended-wrapper">
        <div class="rebuy-cart__flyout-recommendations-mb" v-if="hasCrossSells()">
          <div v-for="(widget_id, index) in settings.cross_sells" :key="index" v-bind:data-rebuy-id="widget_id">
          </div>
        </div>
      </div>
      <div class="rebuy-cart__flyout-footer custom-footer-padding custom-border">
        <div v-if="shouldShowDiscountInput && shouldShowDiscountInput()" class="rebuy-cart__flyout-discount">
          <div class="rebuy-cart__flyout-discount-left">
            <span class="rebuy-cart__flyout-label custom-header-label" v-html="settings.language.discount_code_label"></span>
          </div>
        </div>
        <div v-if="shouldShowDiscountSubtotal && shouldShowDiscountSubtotal()" class="rebuy-cart__flyout-discount-amount custom-discount-amount">
          <div class="rebuy-cart__flyout-discount-left">
            <span class="rebuy-cart__flyout-label custom-header-label" v-html="discountLabel && discountLabel()"></span>
            <div class="rebuy-cart__flyout-tag" v-on:click="removeDiscount()">
              <span>
                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="11" viewBox="0 0 12 11" fill="none">
                  <path d="M9.90863 0.144767L5.99579 0.125301L0.778674 5.34242C0.350403 5.77069 0.350404 6.4715 0.798141 6.91924L4.26324 10.3843C4.71098 10.8321 5.41179 10.8321 5.84006 10.4038L11.0961 5.14775L11.0377 1.27385C11.0377 0.650906 10.5316 0.144768 9.90863 0.144767ZM9.73343 2.22772C9.5193 2.44186 9.16889 2.44186 8.95476 2.22772C8.74062 2.01359 8.74062 1.66318 8.95476 1.44905C9.16889 1.23491 9.5193 1.23491 9.73343 1.44905C9.94757 1.66318 9.94757 2.01359 9.73343 2.22772Z" fill="#F44C7F" />
                </svg>
              </span>
              <span v-html="discount.inputValue" class="custom-sale-text"></span>
              <span class="rebuy-cart__flyout-tag-time custom-body-7">
                <svg xmlns="http://www.w3.org/2000/svg" width="9" height="10" viewBox="0 0 9 10" fill="none">
                  <path d="M1.5 2L4.5 5M7.5 8L4.5 5M4.5 5L7.5 2M4.5 5L1.5 8" stroke="#402650" stroke-linecap="round" />
                </svg>
              </span>
            </div>
          </div>
          <div class="rebuy-cart_flyout-savings-wrapper">
            <h4 class="custom-header-label">Savings</h4>
            <div class="rebuy-cart__flyout-subtotal-amount custom-sale-text" v-html="discountTotal && discountTotal()"></div>
          </div>
        </div>
        <div class="rebuy-cart__flyout-integration" v-if="settings.integrations && settings.integrations.enabled">
        </div>
        <div class="rebuy-cart__flyout-apps"></div>
        <div class="rebuy-cart__flyout-subtotal custom-subtotal-label">
          <div class="rebuy-cart__flyout-subtotal-label">
            <span v-html="getSubtotalLabelAndItemCount()" class="custom-header-label"></span>
          </div>
          <div id="subtotal-el" class="rebuy-cart__flyout-subtotal-amount custom-header-label"></div>
        </div>
        <div class="rebuy-cart__flyout-actions custom-flex-center custom-gap">
          <div v-if="settings.terms && settings.terms.enabled" class="rebuy-cart__flyout-terms">
            <input class="rebuy-cart__flyout-terms-checkbox rebuy-checkbox" id="rebuy-terms-checkbox" name="rebuy-terms-checkbox"
              type="checkbox" v-model="termsAccepted" v-on:click="updateTermsCheck()" />
            <label class="rebuy-cart__flyout-terms-label" for="rebuy-terms-checkbox" v-html="settings.terms.disclaimer"></label>
          </div>
          <button v-if="hasCheckoutButton()" class="rebuy-button custom-checkout-button" type="button" v-on:click="handleCheckout()"
            v-bind:disabled="hasTermsEnabled() && !hasAcceptedTerms() || !hasItems()">
            <span v-html="checkoutLabel()" class="custom-button-text"></span>
          </button>
          <div v-if="promo">
            <span v-if="promo?.first_text" v-html="promo.first_text"></span>
            <span v-if="promo?.pink_text" class="custom-pink-text" v-html="promo.pink_text"></span>
            <span v-if="promo?.last_text" v-html="promo.last_text"></span>
          </div>
          <button v-if="hasViewCartButton()" class="rebuy-button custom-view-cart-button" v-bind:class="{ 'outline': hasCheckoutButton() }" type="button"
            v-on:click="viewCart()">
            <span v-html="viewCartLabel()"></span>
          </button>
          <button v-if="hasContinueShoppingButton()" class="rebuy-button custom-continue-shopping-button" type="button" v-on:click="hide()">
            <span v-html="continueShoppingLabel()"></span>
          </button>
        </div>
        <div class="rebuy-cart__flyout-installments" v-if="installmentsEnabled()" v-html="installmentsMessage()">
        </div>
      </div>
    </div>

    <div class="rebuy-cart__flavor-options-recommendation custom-full-width">
      <div class="flavor-options-top">
        <h5 class="custom-header-label">Select a Flavor...</h5>
        <div class="close">
          <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 15 15" fill="none">
            <g clip-path="url(#clip0_5493_26037)">
              <path d="M1.28586 0.714139L7.74204 7.17032M14.1982 13.6265L7.74204 7.17032M7.74204 7.17032L14.1987 0.714367M7.74204 7.17032L1.28586 13.6265" stroke="#402650" />
            </g>
            <defs>
              <clipPath id="clip0_5493_26037">
                <rect width="15" height="15" fill="white" />
              </clipPath>
            </defs>
          </svg>
        </div>
      </div>

      <div class="variant-select-container">
        <div class="selected-variant-wrapper">
          <span class="variant-option-title custom-body-5">Flavor - </span>
          <span class="variant-selected custom-body-5"></span>
        </div>
        <div class="flavor-bubbles-wrapper"></div>
      </div>
    </div>

      </div>

      <div class="rebuy-cart__flyout-recommendations w-full" v-if="hasCrossSells()" style="display: none;">
        <div v-for="(widget_id, index) in settings.cross_sells" :key="index" v-bind:data-rebuy-id="widget_id"></div>
      </div>
    </div>
    <div class="rebuy-cart__background" v-on:click="hide()"></div>
  </div>

{% endraw %}

<script>
    /** not currently in use
  function addDiscountCode() {
    let discount = '{{ defaultDiscountCode }}' === 'false' ? false : '{{ defaultDiscountCode }}';
    const SmartCart = window.Rebuy.SmartCart;
    let hasDiscount = SmartCart.discount.code ? true : false;

    if (discount && hasDiscount) {
      let appliedDiscount = localStorage.getItem('discount_code');

      if (appliedDiscount !== discount) {
        let appliedDiscountInfo = localStorage.getItem('discount_code-' + appliedDiscount);
        let today = new Date();
        let discountExpires = JSON.parse(appliedDiscountInfo).ends_at;
        let discountExpired = new Date(discountExpires) < today;

        if (discountExpired) {
          localStorage.removeItem('discount_code');
          localStorage.removeItem('discount_code-' + appliedDiscount);
          SmartCart.applyDiscount(discount);
        }
      }
    }

    if (discount && !hasDiscount) {
      SmartCart.applyDiscount(discount);
    }
  }
  */

  /** not currently in use
  document.addEventListener('rebuy.ready', event => {
      var upsells_price_mb = document.querySelectorAll('.rebuy-cart__flyout-recommendations-mb .rebuy-product-price');
      var upsells_prod_actions = document.querySelectorAll('.rebuy-cart__flyout-recommendations-mb .rebuy-product-actions');
      var upsells_grid = document.querySelector('.rebuy-cart__flyout-recommendations-mb .rebuy-product-grid')
      var upsells_widget_content = document.querySelector('.rebuy-cart__flyout-recommendations-mb .rebuy-widget-content')
      for(var x = 0; x < upsells_prod_actions.length; x++){
          upsells_prod_actions[x].appendChild(upsells_price_mb[x]);
      }
      var upsells_scroll_container = document.createElement('div');
      upsells_scroll_container.classList.add('rebuy-widget__upsells-scroll-container');
      upsells_widget_content.appendChild(upsells_scroll_container);
      upsells_scroll_container.appendChild(upsells_grid);

      cartItemCount = event.detail.widget.data.cart.item_count;

      addDiscountCode()
  });
  */

  /** Not currently in use, needs rebranding:
  function initRecommendedProductCards(recommendedProducts) {
    recommendedProducts.forEach((product) => {
      // wait for product card to load
      let interval = setInterval(() => {
        let productCard = document.querySelector(`.product-id-${product.id}`);
        if (productCard) {
          clearInterval(interval);
          initProductCard(productCard, product);
        }
      }, 100);
    })
  }

  function initProductCard(productCard, product) {
    let productInfo = productCard.querySelector('.rebuy-product-info');
    let productLink = product.link;
    let productPrice = (product.selected_variant.price.includes('.00')) ? product.selected_variant.price.replace('.00', '') : product.selected_variant.price;
    let productSubtitle = product.metafields.descriptors.subtitle;
    let productOptions = product.options;
    let sticks = false;
    let quantity = product.option2 + ' sticks';
    let variantName = product.option1;

    productOptions.forEach((option) => {
      if (option.name === "Quantity") {
        let sticks = true;
      }
    });

    let productPriceEl = document.createElement('div');
    productPriceEl.classList.add('rebuy-product-price');
    productPriceEl.innerHTML = `<span class="rebuy-money text-[12px]">$${productPrice}</span>`;
    let productTitleEl = document.createElement('div');
    productTitleEl.classList.add('rebuy-product-title-wrapper');
    productTitleEl.innerHTML = `<a href="${productLink}" class="headers-9 rebuy-product-title">${product.title}</a> <div class="rebuy-product-subtitle italic-subheaders-7">${productSubtitle}</div> <div class="rebuy-product-quantity body-8">${variantName} ${quantity}</div>`;
    productInfo.innerHTML = productTitleEl.outerHTML + productPriceEl.outerHTML;
    }
  */
</script>

{% comment %} <script defer>
  /** Not currently in use, needs rebranding:
  let interval = setInterval(() => {
    //wait until toggleRecommendedEl is available
    let recommendedWrap = document.querySelector('.rebuy-cart__flyout-recommendations-mb');
    let toggleRecommendedEl = recommendedWrap && recommendedWrap.querySelector('.primary-title')
      ? recommendedWrap.querySelector('.primary-title')
      : false;

    if (toggleRecommendedEl) {
      clearInterval(interval);
      recommendedWrap.classList.toggle('open');
      toggleRecommendedEl.addEventListener('click', () => {
        recommendedWrap.classList.toggle('open');
      });
    }
  }, 100);
*/
</script> {% endcomment %}